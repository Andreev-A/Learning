# Местоположение по IP
# import requests
# import pprint
# def get_location_info():
#     return requests.get("http://ip-api.com/json/").json()
# if __name__ == "__main__":
#     pprint.pprint(get_location_info())

# Ваша цель написать программу (скрипт), которая будет запускаться из командной строки. Программа принимает в качестве
# аргумента строку, состоящую из цифр. Гарантируется, что других символов в переданном параметре нет и на вход всегда
# подается не пустая строка. Программа должна вычислить сумму цифр из которых состоит строка и вывести полученный
# результат на печать в стандартный вывод.
# $ python key_value_storage.py 160438521039
# 42
# import sys
# digit_string = sys.argv[1]
# summa = 0
# for digit in digit_string:
#     summa += int(digit)
# print(summa)
# import sys
# print(sum([int(x) for x in sys.argv[1]]))

# Это задание чуть сложней предыдущего и потребует от вас размышлений. Необходимо написать скрипт, который «нарисует»
# (выведет на консоль) лестницу. Количество ступенек в лестнице передается скрипту в качестве параметра. Гарантируется,
# что на вход подаются только целые числа > 0. Чтение данных нужно произвести способом, аналогичным тому, что описан в
# предыдущем задании. Ступени должны отображаться с помощью символа решетки  "#" и пробелов.
# import sys
# digit = int(sys.argv[1])
# for i in range(1, digit + 1):
#     space = digit - i
#     print((' ' * space) + ('#' * i))

# Написать программу, которая запускается в командной строке с параметрами, вычисляет значения корней квадратного
# уравнения и выводит их на печать. На вход программе подаются коэффициенты a, b и c. На печать должно выводиться два
# корня квадратного уравнения. Обратите внимание на то, как выводятся корни - каждый с новой строки.
# Чтобы не усложнять вашу задачу все коэффициенты, которые мы будем подавать вам на вход являются коэффициентами,
# которые в итоге дают 2 корня квадратного уравнения.
# import sys
# a = int(sys.argv[1])
# b = int(sys.argv[2])
# c = int(sys.argv[3])
# d = b ** 2 - 4 * a * c
# x1 = (-b + d ** 0.5) / (2 * a)
# x2 = (-b - d ** 0.5) / (2 * a)
# print(int(x1))
# print(int(x2))

# Чтобы передавать данные между функциями, модулями или разными системами используются форматы данных. Одним из самых
# популярных форматов является JSON. Напишите декоратор to_json, который можно применить к различным функциям, чтобы
# преобразовывать их возвращаемое значение в JSON-формат. Не забудьте про сохранение корректного имени декорируемой
# функции.
# import functools
# from json import dumps
# def to_json(func):
#     @functools.wraps(func)
#     def wrapped(*args, **kwargs):
#         result_dict = func(*args, **kwargs)
#         return json.dumps(result_dict)
#     return wrapped

# Первое задание на этой неделе — не сложное, для разогрева. Ваша задача: написать python-модуль my_file.py, внутрь
# которого необходимо поместить код класса FileReader. Конструктор этого класса принимает один параметр: путь до файла
# на диске. В классе FileReader должен быть реализован метод read, возвращающий строку - содержимое файла, путь к
# которому был указан при создании экземпляра класса. Python модуль должен быть написан таким образом, чтобы импорт
# класса FileReader из него не вызвал ошибок.
# При написании реализации метода read, вам нужно учитывать случай, когда при инициализации был передан путь к
# несуществующему файлу. Требуется обработать возникающее при этом исключение FileNotFoundError и вернуть из метода
# read пустую строку.
# class FileReader:
#     """Класс FileReader помогает читать из файла"""
#     def __init__(self, file_path):
#         self.file_path = file_path
#     def read(self):
#         try:
#             with open(self.file_path) as input_file:
#                 return input_file.read()
#         except OSError:
#             return ''

# Часто при зачислении каких-то средств на счет с нас берут комиссию. Давайте реализуем похожий механизм с помощью
# дескрипторов. Напишите дескриптор Value, который будет использоваться в нашем классе Account.
# class Account:
#     amount = Value()
#     def __init__(self, commission):
#         self.commission = commission
# У аккаунта будет атрибут commission. Именно эту коммиссию и нужно вычитать при присваивании значений в amount.
# new_account = Account(0.1)
# new_account.amount = 100
# print(new_account.amount)  # 90
# Опишите дескриптор в файле и загрузите его на платформу.
# class Value:
#     def __get__(self, obj, obj_type):
#         return self.value
#     def __set__(self, obj, value):
#         self.value = value - value * obj.commission
# Задача практически полностью повторяет пример из лекции, поэтому проблем с ней возникнуть было не должно. Надо только
# разобраться с тем, из какого объекта брать комиссию. Дескрипторы крайне редко встречаются в реальных приложениях, тем
# не менее, важно хотя бы на базовом уровне понимать принцип их работы.
# class Value:
#     def __init__(self):
#         self.amount = 0
#     def __get__(self, obj, obj_type):
#         return self.amount
#     def __set__(self, obj, value):
#         self.amount = value - value * obj.commission

