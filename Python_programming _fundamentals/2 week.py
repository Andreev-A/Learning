"""Дано натуральное число. Требуется определить, является ли год с данным номером високосным. Если год является
високосным, то выведите YES, иначе выведите NO. Напомним, что в соответствии с григорианским календарем, год является
високосным, если его номер кратен 4, но не кратен 100, или же если он кратен 400."""
# year = int(input())
# if year % 4 == 0 and year % 100 != 0 or year % 400 == 0:
#     print('YES')
# else:
#     print('NO')

"""Шахматный король ходит по горизонтали, вертикали и диагонали, но только на 1 клетку. Даны две различные клетки
шахматной доски, определите, может ли король попасть с первой клетки на вторую одним ходом."""
# col_1 = int(input())
# str_1 = int(input())
# col_2 = int(input())
# str_2 = int(input())
# step_col = abs(col_1 - col_2)
# step_str = abs(str_1 - str_2)
# if (step_col == 1 or step_str == 1) and (step_col < 2 and step_str < 2):
#     print('YES')
# else:
#     print('NO')

"""В доме несколько подъездов. В каждом подъезде одинаковое количество квартир. Квартиры нумеруются подряд, начиная с
единицы. Может ли в некотором подъезде первая квартира иметь номер x, а последняя – номер y?"""
# x = int(input())
# y = int(input())
# if not (x - 1) % (y - x + 1):
#     print('YES')
# else:
#     print('NO')

"""Заданы две клетки шахматной доски. Если они покрашены в один цвет, то выведите слово YES, если в разные цвета
– то NO."""
# x_1 = int(input())
# y_1 = int(input())
# x_2 = int(input())
# y_2 = int(input())
# step_x_0 = abs(x_1 - x_2) % 2
# step_y_0 = abs(y_1 - y_2) % 2
# step_x_1 = abs(x_1 - x_2 + 1) % 2
# step_y_1 = abs(y_1 - y_2 + 1) % 2
# if (step_x_0 == 0 and step_y_0 == 0) or (step_x_1 == 0 and step_y_1 == 0):
#     print('YES')
# else:
#     print('NO')

"""Шоколадка имеет вид прямоугольника, разделенного на n_test×m долек. Шоколадку можно один раз разломить по прямой на
две части. Определите, можно ли таким образом отломить от шоколадки часть, состоящую ровно из k долек."""
# n_test = int(input())
# m = int(input())
# k = int(input())
# if n_test * m > k and (k % n_test == 0 or k % m == 0):
#     print('YES')
# else:
#     print('NO')

"""Для данного числа n_test<100 закончите фразу “На лугу пасется...” одним из возможных продолжений: “n_test коров”,
“n_test корова”, “n_test коровы”, правильно склоняя слово “корова”. Программа должна вывести введенное число n_test и
одно из слов: korov, korova или korovy. Между числом и словом должен стоять ровно один пробел."""
# n_test = int(input())
# if 0 <= n_test <= 100:
#     if n_test % 10 == 1 and n_test % 100 != 11:
#         print(n_test, 'korova')
#     elif 2 <= n_test % 10 <= 4 and not 12 <= n_test % 100 <= 14:
#         print(n_test, 'korovy')
#     else:
#         print(n_test, 'korov')

"""На доске стоит белая шашка. Требуется определить, может ли она попасть в заданную клетку, делая ходы по правилам и не
пользуясь ходами дамки (т. е. не используя возможность перемещаться назад после превращения в дамку). Белые шашки
могут ходить по клеткам одного цвета по диагонали вверх-влево или вверх-вправо. Ходов может быть несколько!"""
# col_1 = int(input())
# str_1 = int(input())
# col_2 = int(input())
# str_2 = int(input())
# step_col_0 = abs(col_1 - col_2) % 2
# step_str_0 = abs(str_1 - str_2) % 2
# step_col = abs(col_1 - col_2 + 1) % 2
# step_str = abs(str_1 - str_2 + 1) % 2
# if (step_col_0 == 0 and step_str_0 == 0) or (step_col == 0 and step_str == 0):
#     if col_2 - col_1 >= 0 and str_2 - str_1 >= 1 and col_2 - col_1 <= str_2 - str_1:
#         print('YES')
#     else:
#         print('NO')
# else:
#     print('NO')

"""Даны три стороны треугольника a,b,c. Определите тип треугольника с заданными сторонами. Выведите одно из 4 слов:
rectangular для прямоугольного треугольника, acute для остроугольного треугольника, obtuse для тупоугольного
треугольника или impossible, если треугольника с такими сторонами не существует (считаем, что вырожденный треугольник
тоже невозможен)."""
# a, b, c = int(input()), int(input()), int(input())
# if c < a:
#     a, c = c, a
# if c < b:
#     b, c = c, b
# if c >= a + b:
#     print('impossible')
# elif c ** 2 == a ** 2 + b ** 2:
#     print('rectangular')
# elif c ** 2 < a ** 2 + b ** 2:
#     print('acute')
# elif c ** 2 > a ** 2 + b ** 2:
#     print('obtuse')

"""Даны три целых числа A, B, C. Определить, есть ли среди них хотя бы одно четное и хотя бы одно нечетное."""
# a, b, c = int(input()), int(input()), int(input())
# if (a % 2 or b % 2 or c % 2) and ((a + 1) % 2 or (b + 1) % 2 or (c + 1) % 2):
#     print('YES')
# else:
#     print('NO')

"""Даны три целых числа. Определите, сколько среди них совпадающих. Программа должна вывести одно из чисел: 3 (если все
совпадают), 2 (если два совпадает) или 0 (если все числа различны)."""
# a, b, c = int(input()), int(input()), int(input())
# if a == b == c:
#     print('3')
# elif a == b or b == c or c == a:
#     print('2')
# else:
#     print('0')

"""За многие годы заточения узник замка Иф проделал в стене прямоугольное отверстие размером D×E. Замок Иф сложен из
кирпичей, размером A×B×C. Определите, сможет ли узник выбрасывать кирпичи в море через это отверстие (очевидно,
стороны кирпича должны быть параллельны сторонам отверстия)."""
# a, b, c = int(input()), int(input()), int(input())
# d, e = int(input()), int(input())
# if c < a:
#     a, c = c, a
# if c < b:
#     b, c = c, b
# if (d >= a and e >= b) or (d >= b and e >= a):
#     print('YES')
# else:
#     print('NO')

"""Есть две коробки, первая размером A₁×B₁×C₁, вторая размером A₂×B₂×C₂. Определите, можно ли разместить одну из этих
коробок внутри другой, при условии, что поворачивать коробки можно только на 90 градусов вокруг ребер.
Программа должна вывести одну из следующих строчек:
Boxes are equal, если коробки одинаковые,
The first box is smaller than the second one, если первая коробка может быть положена во вторую,
The first box is larger than the second one, если вторая коробка может быть положена в первую,
Boxes are incomparable, во всех остальных случаях."""
# a_1, b_1, c_1 = int(input()), int(input()), int(input())
# a_2, b_2, c_2 = int(input()), int(input()), int(input())
# if c_1 < a_1:
#     a_1, c_1 = c_1, a_1
# if c_1 < b_1:
#     b_1, c_1 = c_1, b_1
# if b_1 < a_1:
#     a_1, b_1 = b_1, a_1
# if c_2 < a_2:
#     a_2, c_2 = c_2, a_2
# if c_2 < b_2:
#     b_2, c_2 = c_2, b_2
# if b_2 < a_2:
#     a_2, b_2 = b_2, a_2
# if a_1 == a_2 and b_1 == b_2 and c_1 == c_2:
#     print('Boxes are equal')
# elif a_1 <= a_2 and b_1 <= b_2 and c_1 <= c_2:
#     print('The first box is smaller than the second one')
# elif a_1 >= a_2 and b_1 >= b_2 and c_1 >= c_2:
#     print('The first box is larger than the second one')
# else:
#     print('Boxes are incomparable')

"""На склад, который имеет форму прямоугольного параллелепипеда, привезли ноутбуки, упакованные в коробки. Каждая
коробка также имеет форму прямоугольного параллелепипеда. По правилам хранения коробки с ноутбуками должны быть
размещены на складе с выполнением следующих двух условий:
Стороны коробок должны быть параллельны сторонам склада.
Коробку при помещении на склад разрешается расположить где угодно (с выполнением предыдущего условия), в том числе на
другой коробке, но все коробки должны быть ориентированы одинаково (т.е. нельзя одну коробку расположить “стоя”, а
другую —“лежа”)
Напишите программу, которая по размерам склада и размерам коробки с ноутбуком определит максимальное количество
ноутбуков, которое может быть размещено на складе."""
# a, b, c = int(input()), int(input()), int(input())
# x, y, z = int(input()), int(input()), int(input())
# version_1 = (a // x) * (b // y) * (c // z)
# version_2 = (a // x) * (c // y) * (b // z)
# version_3 = (b // x) * (c // y) * (a // z)
# version_4 = (b // x) * (a // y) * (c // z)
# version_5 = (c // x) * (a // y) * (b // z)
# version_6 = (c // x) * (b // y) * (a // z)
# if version_1 <= version_2:
#     version_1, version_2 = version_2, version_1
# if version_1 <= version_3:
#     version_1, version_3 = version_3, version_1
# if version_1 <= version_4:
#     version_1, version_4 = version_4, version_1
# if version_1 <= version_5:
#     version_1, version_5 = version_5, version_1
# if version_1 <= version_6:
#     version_1, version_6 = version_6, version_1
# print(version_1)

"""В кафе мороженое продают по три шарика и по пять шариков. Можно ли купить ровно k шариков мороженого?"""
# k=3n
# k=3n+1=3(n_test−3)+10
# k=3n−1=3(n_test−2)+5
# Эта задача очень старая и детская, детям ее объясняют так:
# вот от 8 до 10 можно сделать - можно, а потом добавляем по 3 значит от 11 до 13 тоже можно и т.д.
# Короче нужно понять, что если три последовательных числа получились, то все после них тоже получатся
# Добавлю, что множество {3x+5y∣x,y=0,1,2,…} является числовой полугруппой с порождающими 3 и 5. Дополнение к числовой
# полугруппе конечно. Максимальное число, не входящее в полугруппу, называется числом Фробениуса. Оно равно (a−1)(b−1)−1
# в случае двух порождающих a и b  (в данном случае (3-1)(5-1)-1 = 7). Мощность дополнения к полугруппе в случае двух
# образующих есть (a−1)(b−1)/2 (в данном случае (3-1)(5-1)/2 = 4).

# k = int(input())
# if k > 2 and k != 4 and k != 7:
#     print('YES')
# else:
#     print('NO')

"""Решить в целых числах уравнение: (ax+b) / (cx+d) = 0
Формат ввода - Вводятся 4 числа: a,b,c,d; c и d не равны нулю одновременно.
Формат вывода - Необходимо вывести все решения, если их число конечно, “NO” (без кавычек), если решений нет, и “INF”
(без кавычек), если решений бесконечно много."""
#  (ax + b ) : ( cx + d ) = 0
# Сводим уравнение к системе:
# { ax + b = 0
# { cx + d ≠ 0
# { ax = -b
# { cx ≠ -d
# Можно учесть все случаи, используя больше 16 условий, но я предпочту более оптимальный вариант, так как знаю как
# зависит количество корней линейного уравнения от коэффициентов.

# a = int(input())
# b = int(input())
# c = int(input())
# d = int(input())
# if a == 0 and b == 0:
#     print('INF')
# elif a == 0 or b * c == a * d:
#     print('NO')
# elif c == 0 or b % a == 0:
#     x = -b // a
#     print(x)
# else:
#     print('NO')

"""На сковородку одновременно можно положить k котлет. Каждую котлету нужно с каждой стороны обжаривать m минут
непрерывно. За какое наименьшее время удастся поджарить с обеих сторон n_test котлет?"""
# Вариант: мест на сковороде 2, время жарки 1, пожарить 3 котлеты. Верный ответ 3, а не 4. Давайте пронумеруем котлеты
# 1,2,3. В первый заход Вы жарите котлеты 1 и 2, во второй - вторую сторону котлеты 2 и котлету 3. В третий -
# дожариваете 1 и 3.

# k, m, n_test = int(input()), int(input()), int(input())
# if n_test <= k:
#     print(2 * m)
# elif (n_test * 2) % k:
#     print(((n_test * 2) // k + 1) * m)
# else:
#     print((n_test * 2) // k * m)

"""Вдоль прямой выложены три спички. Необходимо переложить одну из них так, чтобы при поджигании любой спички сгорали
все три. Чтобы огонь переходил с одной спички на другую, необходимо чтобы эти спички соприкасались (хотя бы концами).
Требуется написать программу, определяющую, какую из трех спичек необходимо переместить.
Формат ввода - Вводятся шесть целых чисел : l₁, r₁, l₂, r₂, l₃, r₃ – координаты первой, второй и третьей спичек
соответственно(0≤lᵢ<rᵢ≤100). Каждая спичка описывается координатами левого и правого концов по горизонтальной оси OX.
Формат вывода - Выведите номер искомой спички. Если возможных ответов несколько, то выведите наименьший из них
(наименьший по номеру спички). В случае, когда нет необходимости перемещать какую-либо спичку, выведите 0. Если же
требуемого результата достигнуть невозможно, то выведите -1."""
# l1, r1 = int(input()), int(input())
# l2, r2 = int(input()), int(input())
# l3, r3 = int(input()), int(input())
# # 1 ⋂ 2 ⋂ 3
# # 1 ⋂ 3 ⋂ 2
# # 2 ⋂ 1 ⋂ 3
# # 2 ⋂ 3 ⋂ 1
# # 3 ⋂ 2 ⋂ 1
# # 3 ⋂ 1 ⋂ 2
# # if 0 <= l1 < r1 <= 100 and 0 <= l2 < r2 <= 100 and 0 <= l3 < r3 <= 100:
# if (l1 <= r2 and l2 <= r1 and l2 <= r3 and l3 <= r2) \
#         or (l1 <= r3 and l3 <= r1 and l3 <= r2 and l2 <= r3) \
#         or (l2 <= r1 and l1 <= r2 and l1 <= r3 and l3 <= r1) \
#         or (l2 <= r3 and l3 <= r2 and l3 <= r1 and l1 <= r3) \
#         or (l3 <= r2 and l2 <= r3 and l2 <= r1 and l1 <= r2) \
#         or (l3 <= r1 and l1 <= r3 and l1 <= r2 and l2 <= r1):
#     print(0)
# else:
#     len_1 = r1 - l1
#     len_2 = r2 - l2
#     len_3 = r3 - l3
#     # между 2 и 3 подвинуть 1
#     # между 3 и 2 подвинуть 1
#     # 2 ⋂ 3 к ним подвинуть 1
#     if (l3 > r2 and len_1 >= l3 - r2) \
#             or (l2 > r3 and len_1 >= l2 - r3) \
#             or (l2 <= r3 and l3 <= r2):
#         print(1)
#     elif (l3 > r1 and len_2 >= l3 - r1) \
#             or (l1 > r3 and len_2 >= l1 - r3) \
#             or (l1 <= r3 and l3 <= r1):
#         print(2)
#     elif (l1 > r2 and len_3 >= l1 - r2) \
#             or (l2 > r1 and len_3 >= l2 - r1) \
#             or (l1 <= r2 and l2 <= r1):
#         print(3)
#     else:
#         print(-1)
# # else:
# #     print(-1)

"""В одну транспортную компанию поступил заказ на перевозку двух ящиков из одного города в другой. Для перевозки ящики
решено было упаковать в специальный контейнер. Ящики и контейнер имеют вид прямоугольных параллелепипедов. Длина,
ширина и высота первого ящика  —  l₁,w₁ и h₁, соответствующие размеры второго ящика – l₂,w₂ и h₂. Контейнер имеет
длину, ширину и высоту lc,wc и hc. Поскольку ящики содержат хрупкое оборудование, после упаковки в контейнер каждый
из них должен остаться в строго вертикальном положении. Таким образом, ящики можно разместить рядом или один на другом
Для надежного закрепления в контейнере стороны ящиков должны быть параллельны его сторонам. Иначе говоря, если исходно
ящики были расположены так, что все их стороны параллельны соответствующим сторонам контейнера, то каждый из них
разрешается перемещать и поворачивать относительно вертикальной оси на угол, кратный 90 градусам (относительно
горизонтальной оси ни контейнер, ни ящики поворачивать нельзя).
Разумеется, после упаковки оба ящика должны полностью находиться внутри контейнера и не должны пересекаться.
Выясните, можно ли поместить ящики в контейнер с соблюдением указанных условий."""
# l1, w1, h1 = int(input()), int(input()), int(input())
# l2, w2, h2 = int(input()), int(input()), int(input())
# lc, wc, hc = int(input()), int(input()), int(input())
# my_input = 'NO'
# if h1 <= hc and h2 <= hc:
#     if (l1 + l2 <= lc and (w1 <= wc and w2 <= wc)) or (
#             w1 + w2 <= lc and (l1 <= wc and l2 <= wc)) or (
#             l1 + l2 <= wc and (w1 <= lc and w2 <= lc)) or (
#             w1 + w2 <= wc and (l1 <= lc and l2 <= lc)) or (
#             l1 + w2 <= lc and (w1 <= wc and l2 <= wc)) or (
#             l2 + w1 <= lc and (w2 <= wc and l1 <= wc)) or (
#             l1 + w2 <= wc and (w1 <= lc and l2 <= lc)) or (
#             l2 + w1 <= wc and (w2 <= lc and l1 <= lc)):
#         my_input = 'YES'
# if h1 + h2 <= hc:
#     if ((l1 <= lc and l2 <= lc) and (w1 <= wc and w2 <= wc)) or (
#             (w1 <= lc and w2 <= lc) and (l1 <= wc and l2 <= wc)) or (
#             (l1 <= wc and l2 <= wc) and (w1 <= lc and w2 <= lc)) or (
#             (w1 <= wc and w2 <= wc) and (l1 <= lc and l2 <= lc)) or (
#             (l1 <= lc and w2 <= lc) and (w1 <= wc and l2 <= wc)) or (
#             (l2 <= lc and w1 <= lc) and (w2 <= wc and l1 <= wc)) or (
#             (l1 <= wc and w2 <= wc) and (w1 <= lc and l2 <= lc)) or (
#             (l2 <= wc and w1 <= wc) and (w2 <= lc and l1 <= lc)):
#         my_input = 'YES'
# print(my_input)

# # Транспортная компания
# al, aw, ah, bl, bw, bh, cl, cw, ch = (int(input()) for _ in 'контейнер')
# q = 'NO'
# if al > aw:
#     al, aw = aw, al
# if bl > bw:
#     bl, bw = bw, bl
# if cl > cw:
#     cl, cw = cw, cl
# # Ни один ящик не должен превышать контейнер по по размерам
# if ah > ch or bh > ch or al > cl or bl > cl or aw > cw or bw > cw:
#     pass
# # Ящики не влезают ни по длине, ни по ширине, ни друг на дружке
# elif al + bl > cl and aw + bw > cw and ah + bh > ch:
#     pass
# else:  # Все остальные случаи работают
#     q = 'YES'
# print(q)

"""По данному натуральному числу N выведите такое наименьшее целое число k, что 2ᵏ≥N.
Операцией возведения в степень пользоваться нельзя!"""
# n_test = int(input())
# i, degree = 1, 0
# while n_test >= i:
#     if n_test != i:
#         degree += 1
#     i *= 2
# print(degree)

"""В первый день спортсмен пробежал X километров, а затем он каждый день увеличивал пробег на 10% от предыдущего
значения (для решения задачи разрешается использовать числа с запятой, которые в Питоне пишутся через точку).
По данному числу X определите номер дня, на который пробег спортсмена составит не менее Y километров."""
# x = int(input())
# y = int(input())
# day_number = 1
# while y > x:
#     day_number += 1
#     x = x + x * 0.1
# print(day_number)

"""Последовательность состоит из натуральных чисел и завершается числом 0. Определите значение второго по величине
элемента в этой последовательности, то есть элемента, который будет наибольшим, если из последовательности удалить
одно вхождение наибольшего элемента."""
# n_test = int(input())
# max_1 = min_2 = n_test
# n_test = int(input())
# if n_test > max_1:
#     min_2, max_1 = max_1, n_test
# else:
#     min_2 = n_test
# while n_test != 0:
#     n_test = int(input())
#     if n_test > max_1 and n_test:
#         min_2, max_1 = max_1, n_test
#     elif n_test > min_2:
#         min_2 = n_test
# print(min_2)

"""Последовательность состоит из натуральных чисел и завершается числом 0. Определите количество элементов этой
последовательности, которые равны ее наибольшему элементу."""
# n_test, max_n, count = 1, 0, 0
# while n_test != 0:
#     n_test = int(input())
#     if n_test == max_n and n_test:
#         count += 1
#     if n_test > max_n and n_test:
#         max_n = n_test
#         count = 1
# print(count)

"""Последовательность Фибоначчи определяется так:
F[0] = 0, F[1] = 1, ..., F[n_test] = F[n_test-1] + F[n_test-2].
По данному числу n_test определите n_test-е число Фибоначчи F[n_test]."""
# n_test = int(input())
# i, f_0, f_1 = 2, 0, 1
# if n_test == f_0:
#     print(f_0)
# elif n_test == f_1:
#     print(f_1)
# else:
#     while n_test >= i:
#         f_n = f_0 + f_1
#         f_0, f_1 = f_1, f_n
#         i += 1
#     print(f_n)

"""Последовательность Фибоначчи определяется так:
F[0]=0, F[1]=1, ..., F[n_test]=F[n_test-1]+F[n_test-2].
Дано натуральное число A. Определите, каким по счету числом Фибоначчи оно является, то есть выведите такое число n_test,
что F[n_test]=A.
Если А не является числом Фибоначчи, выведите число -1."""
# n_test = int(input())
# i, f_0, f_1, f_n = 1, 0, 1, 0
# if n_test == f_0:
#     print(f_0)
# elif n_test == f_1:
#     print(f_1)
# else:
#     while n_test > f_n:
#         f_n = f_0 + f_1
#         f_0, f_1 = f_1, f_n
#         i += 1
#     if n_test == f_n:
#         print(i)
#     else:
#         print(-1)

"""Исполнитель “Раздвоитель” преобразует натуральные числа. У него есть две команды: “Вычесть 1” и “Разделить на 2”,
первая команда уменьшает число на 1, вторая команда уменьшает число в два раза, если оно чётное,иначе происходит
ошибка. Дано два натуральных числа A и B (A>B). Напишите алгоритм для Раздвоителя, который преобразует число A в
число B и при этом содержит минимальное число команд. Команды алгоритма нужно выводить по одной в строке, первая
команда обозначается, как -1, вторая команда как :2."""
# a, b = int(input()), int(input())
# while a > b:
#     if a % 2 or a // 2 < b:
#         a -= 1
#         print("-1")
#     elif a // 2 >= b:
#         a //= 2
#         print(':2')

"""Переставьте цифры числа в обратном порядке.
Формат ввода - Задано единственное число N
Формат вывода - Необходимо вывести цифры данного числа в обратном порядке."""
# n_test = int(input())
# if n_test < 10:
#     print(n_test)
# while n_test // 10:
#     s = n_test % 10
#     print(s, end='')
#     n_test //= 10
#     if not (n_test // 10):
#         print(n_test)

"""Назовем число палиндромом, если оно не меняется при перестановке его цифр в обратном порядке. Напишите программу,
которая по заданному числу K выводит количество натуральных палиндромов, не превосходящих K.
Формат ввода - Задано единственное число K (1≤K≤100000).
Формат вывода - Необходимо вывести количество натуральных палиндромов, не превосходящих K."""
# n = int(input())
# n_test, count = 10, 0
# if n < 10:
#     count = n
# else:
#     count = 9
# while n >= n_test:
#     test = n_test
#     test_rev = ''
#     while test // 10:
#         s = str(test % 10)
#         test_rev += s
#         test //= 10
#         if not (test // 10):
#             test_rev += str(test)
#     if str(n_test) == test_rev:
#         count += 1
#     n_test += 1
# print(count)

"""Дана последовательность натуральных чисел, завершающаяся числом 0. Определите, какое наибольшее число подряд идущих
элементов этой последовательности равны друг другу."""
# n = int(input())
# n_prev, len_max, len_curr = n, 1, 1
# while n != 0:
#     n = int(input())
#     if n == n_prev:
#         len_curr += 1
#     elif n != n_prev:
#         if len_max < len_curr:
#             len_max = len_curr
#         len_curr = 1
#         n_prev = n
# print(len_max)

"""Дана последовательность натуральных чисел, завершающаяся числом 0. Определите наибольшую длину монотонного фрагмента
последовательности (то есть такого фрагмента, где все элементы либо больше предыдущего, либо меньше).
Формат ввода - Вводится последовательность целых чисел, оканчивающаяся числом 0 (само число 0 в последовательность не
входит, а служит как признак ее окончания).
Формат вывода - Выведите ответ на задачу."""
# n = int(input())
# n_prev, len_max, len_curr, flag = n, 1, 1, 0
# while n != 0:
#     n = int(input())
#     if n > n_prev and n:
#         if flag == 2:
#             if len_max < len_curr:
#                 len_max = len_curr
#             len_curr = 1
#         len_curr += 1
#         n_prev, flag = n, 1
#     elif n < n_prev and n:
#         if flag == 1:
#             if len_max < len_curr:
#                 len_max = len_curr
#             len_curr = 1
#         len_curr += 1
#         n_prev, flag = n, 2
#     elif n == n_prev or n == 0:
#         if len_max < len_curr:
#             len_max = len_curr
#         len_curr = 1
#         flag = 0
# print(len_max)

"""Определите наименьшее расстояние между двумя локальными максимумами последовательности натуральных чисел,
завершающейся числом 0. Локальным максимумом называется такое число в последовательности, которое больше своих
соседей. Если в последовательности нет двух локальных максимумов, выведите число 0. Начальное и конечное значение при
этом локальными максимумами не считаются.
Формат ввода - Вводится последовательность целых чисел, оканчивающаяся числом 0 (само число 0 в последовательность не
входит, а служит как признак ее окончания).
Формат вывода - Выведите ответ на задачу."""
# n_1 = int(input())
# n_2 = int(input())
# n_3, len_min, len_curr = 1, 0, 0
# start = False
# while n_3 != 0:
#     n_3 = int(input())
#     if n_2 > n_1 and n_2 > n_3 and n_3:
#         start = True
#         if len_min > len_curr or len_min == 0 and len_curr != 0:
#             len_min = len_curr
#         len_curr = 0
#     n_1, n_2 = n_2, n_3
#     if start:
#         len_curr += 1
# print(len_min)
