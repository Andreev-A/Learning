# Строковые методы не будут производить дополнительных действий и не будут менять начальные строки
# Метод center()
# Этот метод нужно применять в тех случаях, если нужно выравнять строку по центру. Выравнивание будет выполняться с
# пробела. Сам метод составляет в себя несколько параметров: это length (есть обязательным параметром и показывает
# длину строки) и fillchar (символ выравнивания). Если вы указали новое число для ширины новой строки, чем той, которая
# была в начальной строке, то вы получите такой же код какой был в начале.
# value = "bad"
# some_value = value.center(11, "-")
# print(some_value)  # ----bad----
# Метод find()
# Этот метод просто необходим, если вам нужно найти индексы совпадений подстроки в строке. Если данные вы не нашли, то
# метод возвратит -1. Данная функция может принимать такие параметры: substring (символ/подстрока) – это необходимая для
# вас подстрока; start – первый индекс со значением 0; end – индекс, который заканчивает отыскивание нужной подстроки.
# С помощью метода find() можно находить необходимые индексы первого вхождения подстроки в последовательности (строке).
# my_question = "Когда пары?"
# print("Индекс буквы ‘р’:", my_question.find("р"))  # Индекс буквы 'р': 8
# Метод isalnum()
# Метод isalnum() нужен для того, чтобы выяснить есть ли в строке буквы или цифры. isalnum() вернет True в тех случаях,
# когда строка заполнена либо символами, либо числами.
# my_var = 'kfc429'
# print(my_var.isalnum())  # True
# myVar = 'kfc@429'
# print(myVar.isalnum())  # False
# var = '333-kfc'
# print(var.isalnum())  # False
# Метод replace()
# Метод replace() нужен для того, чтобы вернуть копии строки или заменить небольшую ее часть.
# my_variant='Lilia, Vita, Sasha, Masha'  # Нужно заменить все подстроки “Vita” в строке
# print(my_variant.replace('Vita', 'Vitochka'))  # Lilia, Vitochka, Sasha, Masha
# Метод casefold()
# Этот метод необходим для того, чтобы преобразовать строку в сложенный регистр. Сложенный регистр это почти тоже самое
# что нижний регистр, но более агрессивно.
# text = 'РозЫ, ПИоны, МаКИ'
# print(text.casefold())  # розы, пионы, маки
# Метод endswith()
# Метод нужен для того, чтобы вернуть True, если строка имеет искомый суффикс. Данный метод может принимать такие три
# параметра в позициях: суффиксы-строки или кортежи с суффиксами, чтобы проверять данные в строках; start — это
# необязательный параметр, который помогает проверять суффиксы в строках; end — тоже необязательный параметр, который
# нужен для проверки суффиксов в строках.
# Итак, сам метод нужен чтобы возвратить True или False, если строки заканчиваются суффиксом или не заканчиваются
# никакими суффиксами. Также в языке Python есть возможность передавать суффиксы кортежей. Если в вашей строке есть
# окончания на элемент кортежа, то данный метод вернет True. Если этого нет, то вернется False.
# my_text = "Разве ты купил книгу?"
# new = my_text.endswith("книгу?")
# print(new)  # True
# Метод index()
# Данный метод возвращает индексы подстрок в середине строк. Если во время проверки не найдётся нужная подстрока, то
# пишется, что нашлась ошибка (ValueError). Метод может принимать данные параметров: sub (главная подстрока, которую
# нужно искать в строке), start (начало поиска подстроки), end (необязательный параметр, конец поиска подстроки).
# По данному методу можно обнаружить начало указанной подстроки в исходной. Необязательные позиции start и end нужны для
# того, чтобы принимать любые значения и поддерживать механизмы срезов.
# Методом можно воспользоваться в случаях необходимости найти начальные индексы подстроки.
# variant = 'В аудиторию вошел преподаватель'
# print(variant.index('преподаватель'))  # 18
# print(variant.index('пришел'))  # ValueError: substring not found
# Метод isdecimal()
# С помощью этого метода можно вернуть True, в тех случаях, когда символы в строках являются десятичными числами. Если
# десятичных чисел в строке не нашлось, то возвращается False. Данный метод определяет есть ли цифры в строке. В таком
# случае возвращается True. Если в строке есть пробелы, буквы, точка или вообще пустая строка, возвращается False.
# my_text = "12345"
# print(my_text.isdecimal())  # True (в строке только цифры)
# my_text_2 = "1_2345"
# print(my_text_2.isdecimal())  # False (в строке есть нижнее подчеркивание)
# Метод isdigit()
# Данный метод похож на метод isdecimal(). True появляется в результате, если цифры в строке есть и False, если в строке
# появляется пробел или другой символ, буква, нижнее подчеркивание или смайлик.
# С помощью метода isdigit() вы можете понять, что необходимая строка содержит цифры.
# Но есть одно но: данный метод работать в тех случаях, если ваши числа являются положительными, на отрицательные данный
# метод не работает.
# text1 = '_'
# print(text1.isdigit())  # False
# text2 = '1235'
# print(text2.isdigit())  # True
# text3 = '12 563'
# print(text3.isdigit())  # False
# Метод join()
# Он помогает собирать строки из списков с определёнными разделителями.
# Данный метод отвечает за превращение списка в строку. Он может использоваться тогда, когда нужно принять итерируемые
# объекты как аргумент, а список очень часто выступает аргументом. Нужно знать, что этот список должен состоять из строк
# Очень часто начинающие python-программисты задаются вопросом: почему метод join() относится к методам строки, а не
# методам списка. Отвечаю: функцию join() вы можете использовать в разных целях и с разными итерируемыми объектами, но в
# результате вы получаете только строку.
# Метод join() нельзя использовать в тех случаях, где объединять элементы разного типа. Чтобы не сделать ошибку,
# превращайте все объекты списка в строки. Это обязательное требование. С помощью метода join() вы можете разбивать
# строки и обратно преобразовать строку в список.
# flower = ["r", "o", "s", "e"]
# flower_str = ",".join(flower)
# print("Цветок:", flower_str)  # Цветок: r,o,s,e
# Метод split()
# Метод split() есть противоположностью методу join. С его помощью можно разбить строки по нужному вам разделителю и
# получить список строк.
# Метод split() может принимать несколько параметров. Первый параметр — это разделитель, по которому будет разделяться
# строка. Если вы не указали разделитель, то любой символ (пробел или даже другая строка) уже автоматически считается
# новым разделителем. Другой параметр — это maxsplit. Он нужен для того, чтобы показать какое будет число разделений в
# строке. Если вы укажите maxsplit, то ваш список будет иметь maxsplit и еще один объект.
# food = 'Water, Bread, Bun, Grape'
# print(food.split(',', 2))  # ['Water', ' Bread', ' Bun, Grape']
# print(food.split(',', 3))  # ['Water', ' Bread', ' Bun', ' Grape']
# Метод isnumeric()
# Мы прекрасно помним, что Python имеет динамическую типизацию (когда в объектах хранится информация о значении и
# информации о типах объектов; сама типизация имеет ряд преимуществ). Очень часто с помощью различных строковых методов
# не нужно менять тип данных. В Python есть встроенный метод isnumeric(). Он нужен чтобы обрабатывать строки.
# Метод isnumeric() возвращает True в тех случаях, если символы оказываются числовыми символами. Если этого не происходит
# , то выводится False.
# С помощью метода isnumeric() можно определить есть ли в аргументе дроби, целые числа, индекса (верхние и нижние),
# арабские и римские цифры.
# x = "Демяновка_деревня"
# print(x.isnumeric())  # False (в строке буквы)
# x = "5896"
# print(x.isnumeric())  # True (в строке цифры)
# Метод isspace()
# С помощью данного метода вы сможете проверить есть ли в строке пробелы. Этот метод не имеет никаких параметров. Если
# строка пуста или имеет один пробел, то вы в результате увидите False. Если наоборот, то True.
# var = ' b '
# print(var.isspace())  # False
# Метод isupper()
# Данная строковая функция (метод) нужна для того, чтобы вы могли проверить все ли введенные буквы находятся в верхнем
# регистре. Метод isupper() позволяет вам вернуть True в тех случаях, если ваши буквы будут в строке прописными. Если нет
# — то будет выводится False.
# Нужно помнить о том, что данный метод не будет принимать других аргументов, а будет работать только с указанными вами
# аргументами.
# text = 'Косая строчка'
# print(text.isupper())  # False
# Метод partition()
# Данный метод нужен для того, чтобы строка разбилась на начало, середину и конец. В результате будет кортеж. В основном
# строка будет разбиваться слева направо.
# Метод имеет один параметр sep. Он может содержать один или несколько букв или символов.
string = 'The lion is the king of beasts'
print(string.partition('lion'))  # ('The ', 'lion', ' is the king of beasts')
print(string.partition('king'))  # ('The lion is the ', 'king', ' of beasts')
string = "The tiger is not king of beasts"
print(string.partition('is not'))  # ('The tiger ', 'is not', ' king of beasts')
