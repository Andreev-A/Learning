# -*- coding: utf-8 -*-

# Игра «Быки и коровы»
# https://goo.gl/Go2mb9
#
# Правила:
# Компьютер загадывает четырехзначное число, все цифры которого различны
# (первая цифра числа отлична от нуля). Игроку необходимо разгадать задуманное число.
# Игрок вводит четырехзначное число c неповторяющимися цифрами,
# компьютер сообщают о количестве «быков» и «коров» в названном числе
# «бык» — цифра есть в записи задуманного числа и стоит в той же позиции,
#       что и в задуманном числе
# «корова» — цифра есть в записи задуманного числа, но не стоит в той же позиции,
#       что и в задуманном числе
#
# Например, если задумано число 3275 и названо число 1234,
# получаем в названном числе одного «быка» и одну «корову».
# Очевидно, что число отгадано в том случае, если имеем 4 «быка».
#
# Формат ответа компьютера
# > быки - 1, коровы - 1


# Составить отдельный модуль mastermind_engine, реализующий функциональность игры.
# В этом модуле нужно реализовать функции:
#   загадать_число()
#   проверить_число(NN) - возвращает словарь {'bulls': N, 'cows': N}
# Загаданное число хранить в глобальной переменной.
# Обратите внимание, что строки - это список символов.
#
# В текущем модуле (Lesson_006/01_mastermind.py) реализовать логику работы с пользователем:
#   модуль движка загадывает число
#   в цикле, пока число не отгадано
#       у пользователя запрашивается вариант числа
#       модуль движка проверяет число и выдает быков/коров
#       результат быков/коров выводится на консоль
#  когда игрок угадал таки число - показать количество ходов и вопрос "Хотите еще партию?"
#
# При написании кода учитывайте, что движок игры никак не должен взаимодействовать с пользователем.
# Все общение с пользователем делать в текущем модуле. Представьте, что движок игры могут использовать
# разные клиенты - веб, чатбот, приложение, етс - они знают как спрашивать и отвечать пользователю.
# Движок игры реализует только саму функциональность игры.
# Это пример применения SOLID принципа (см https://goo.gl/GFMoaI) в архитектуре программ.
# Точнее, в этом случае важен принцип единственной ответственности - https://goo.gl/rYb3hT

from mastermind_engine import number_generator, check_the_number
from termcolor import cprint, colored

while True:
    mode_debugging = number_generator()
    if mode_debugging is not None:  # uncomment stroke in number_generator()
        print('Загаданное числа для тестов - ', mode_debugging)
    cprint('Компьютер загадал число. Введите четырехзначное число c неповторяющимися цифрами ', color='cyan')
    move_counter = 0
    while True:
        entered_number = input(colored('Ваше число: ', color='green'))
        if len(entered_number) == 4 and entered_number.isdigit():
            move_counter += 1
            result_of_checking = check_the_number(entered_number)
        else:
            cprint('Вы неправильно ввели число. Попробуйте еще раз.', color='red')
            continue
        if result_of_checking['bulls'] != 4:
            cprint('быки - ' + str(result_of_checking['bulls']) + ', коровы - ' + str(result_of_checking['cows']),
                   color='cyan')
        else:
            if move_counter % 100 in [11, 12, 13, 14] or move_counter % 10 in [0, 5, 6, 7, 8, 9]:
                cprint('Вы угадали число за ' + str(move_counter) + ' ходов', color='magenta')
            elif move_counter % 10 == 1:
                cprint('Вы угадали число за ' + str(move_counter) + ' ход', color='magenta')
            elif move_counter % 10 in [2, 3, 4]:
                cprint('Вы угадали число за ' + str(move_counter) + ' хода', color='magenta')
            break
    repeat = input(colored('Хотите еще партию? (да/нет): ', color='cyan')).lower()
    if repeat == 'да':
        continue
    else:
        break
